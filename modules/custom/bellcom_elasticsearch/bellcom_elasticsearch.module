<?php
/**
 * @file
 * Code for the Bellcom Elasticsearch feature.
 */

include_once 'bellcom_elasticsearch.features.inc';

module_load_include('inc', 'bellcom_elasticsearch', 'bellcom_elasticsearch.admin');

function bellcom_elasticsearch_menu(){
  $items = array();

  $items['admin/config/search/kle'] = array(
    'title' => 'KLE Weight',
    'description' => 'Configure the weight of the KLE terms',
    'type' => MENU_NORMAL_ITEM | MENU_LOCAL_TASK,
    'access arguments' => array('administer search_api'),
    'page callback' => 'bellcom_elasticsearch_kle_settings_page',
    'file' => 'bellcom_elasticsearch.admin.inc',
  );

  $items['admin/config/search/phrase'] = array(
    'title' => 'Phrase catcher',
    'description' => 'Configure the phrase top search result',
    'type' => MENU_NORMAL_ITEM | MENU_LOCAL_TASK,
    'access arguments' => array('administer search_api'),
    'page callback' => 'bellcom_elasticsearch_phrase_catcher_settings_page',
    'file' => 'bellcom_elasticsearch.admin.inc',
  );

  $items['kle/%/update/%/%/%'] = array(
    'type' => MENU_CALLBACK,
    'access arguments' => array('administer search_api'),
    'page callback' => 'bellcom_elasticsearch_update_kle',
    'page arguments' => array(1,3,4,5),
    'file' => 'bellcom_elasticsearch.admin.inc',
  );

  $items['phrase/%/update'] = array(
    'type' => MENU_CALLBACK,
    'access arguments' => array('administer search_api'),
    'page callback' => 'bellcom_elasticsearch_update_phrase',
    'page arguments' => array(1),
    'file' => 'bellcom_elasticsearch.admin.inc',
  );

  $items['admin/config/search/synonyms'] = array(
    'title' => 'Synonyms set up',
    'description' => 'Configure the synonyms used during the search',
    'type' => MENU_NORMAL_ITEM | MENU_LOCAL_TASK,
    'access arguments' => array('administer search_api'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bellcom_elasticsearch_synonyms_settings_page'),
    'file' => 'bellcom_elasticsearch.admin.inc',
  );

  return $items;
}


function bellcom_elasticsearch_elasticsearch_connector_search_api_query_alter($query, &$params){
  $query_str = $params['body']['query']['bool']['must'][0]['multi_match']['query'];
  $params['body']['query'] = array(
    'function_score' => array(
      'functions' => _bellcom_elasticsearch_get_boosting($query_str),
      'query'=> _bellcom_elasticsearch_get_query($query_str)
    )
  );
  $params['body']['size'] = _bellcom_elasticsearch_get_size($query_str);
}

function _bellcom_elasticsearch_get_boosting($query_string = null){
  $now = date('Y-m-d H:i:s', time());
  $fromDateCondition = db_or();
  $fromDateCondition->condition('from_date', $now, "<=");
  $fromDateCondition->condition('from_date', NULL, 'is');

  $untilDateCondition = db_or();
  $untilDateCondition->condition('until_date', $now, ">=");
  $untilDateCondition->condition('until_date', NULL, 'is');

  $results = db_select('bellcom_elasticsearch_kle', 'i')
    ->fields('i')
    ->condition('weight', 1, "!=")
    ->condition($fromDateCondition)
    ->condition($untilDateCondition)
    ->execute()
    ->fetchAll();

  $boosting = array();
  foreach ($results as $kle_term){
    $boosting[] = array(
      'weight' => $kle_term->weight,
      'filter' => array(
        'term' => array('field_os2web_borger_dk_kle' => $kle_term->tid, 'field_os2web_base_field_kle_ref' => $kle_term->tid)
      )
    );
  }

  // making sure, that all found phrase NID are on top of the list (multiplying weight by 100)
  $results = db_query('SELECT * FROM {bellcom_elasticsearch_phrase_catcher} i WHERE :phrase LIKE i.phrase
			AND nid IS NOT NULL AND (i.from_date IS NULL or i.from_date <= :now)
			AND  (i.until_date IS NULL or i.until_date >= :now)',
    array(':phrase' => $query_string, ':now' => $now))->fetchAll();

  foreach ($results as $phrase){
    $boosting[] = array(
      'weight' => intval($phrase->weight)*100,
      'filter' => array(
        'term' => array('nid' => $phrase->nid)
      )
    );
  }

  return $boosting;
}

function _bellcom_elasticsearch_get_query($query_string) {
  $synonym_active = variable_get('bellcom_elasticsearch_synonyms_active', FALSE);
  $query = array(
    'bool' => array(
      'should' => array(
        array(
          'query_string' => array(
            'query' => ($synonym_active)? $query_string : '*' . $query_string . '*',
            'fields' => array('_all'),
            'analyzer' => ($synonym_active)? 'synonym' : null
          )
        ),
      ),
    )
  );

  // making sure the all found phrase NID are included into the search result
  $results = db_query('SELECT * FROM {bellcom_elasticsearch_phrase_catcher} i WHERE :phrase LIKE i.phrase
			AND nid IS NOT NULL AND (i.from_date IS NULL or i.from_date <= :now)
			AND  (i.until_date IS NULL or i.until_date >= :now)',
    array(':phrase' => $query_string, ':now' => date('Y-m-d H:i:s', time())))->fetchAll();
  foreach($results as $phrase) {
    $query['bool']['should'][] = array(
      'term' => array('nid' => $phrase->nid)
    );
  }

  return $query;
}

function _bellcom_elasticsearch_get_size($query_string){
  // making sure the all found phrase NID are included into the search result
  $results = db_query('SELECT exclusive FROM {bellcom_elasticsearch_phrase_catcher} i WHERE :phrase LIKE i.phrase
	AND nid IS NOT NULL AND (i.from_date IS NULL or i.from_date <= :now)
	AND  (i.until_date IS NULL or i.until_date >= :now)',
    array(':phrase' => $query_string, ':now' => date('Y-m-d H:i:s', time())))->fetchAll();

  foreach($results as $result) {
    if ($result->exclusive) {//if any of the mathcing phrase are set to be exclusive
      return 1;
    }
  }

  //non of the matching phrases are set to be exclusive, return defaul size
  return 13;
}
