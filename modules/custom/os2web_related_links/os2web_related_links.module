<?php
/**
 * @file
 * Code for the OS2WEB related links.
 */

/**
 * Implements hook_block_info().
 */
function os2web_related_links_block_info() {
  $blocks = array();

  $blocks['term_related_links_block'] = array(
    'info' => t('Term - Relaterede links block'),
  );
  $blocks['node_related_links_block'] = array(
    'info' => t('Node - Relaterede links block'),
  );
  $blocks['selfservice_links_block'] = array(
    'info' => t('Selvbetjenings links block'),
  );
  $blocks['term_selfservice_links_block'] = array(
    'info' => t('Term/Underterm Selvbetjenings links block'),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function os2web_related_links_block_view($delta = '') {
  $block = array();
  switch ($delta) {

    case 'term_related_links_block':
      $block['subject'] = t('Relaterede sider');
      $block['content'] = _os2web_related_links_block_content('taxonomy_term');
      break;

    case 'node_related_links_block':
      $block['subject'] = t('Relaterede sider');
      $block['content'] = _os2web_related_links_block_content('node');
      break;

    case 'selfservice_links_block':
      $block['subject'] = t('Selvbetjening');
      $block['content'] = _os2web_related_links_block_content_selfservice();
      break;

    case 'term_selfservice_links_block':
      $block['subject'] = t('Term/underterm Selvbetjening');
      $block['content'] = _os2web_term_block_content_selfservice_links();
      break;
  }
  return $block;

}

/**
 * OS2WEB block view content callback.
 */
function _os2web_related_links_block_content($entity_type = 'node') {
  $related_links = array();
  $entity = FALSE;
  $eid = arg(1);
  $output = '';
  if (is_numeric($eid)) {
    if ($entity_type == 'node') {
      $entity = node_load($eid);
    }
    else {
      $entity = taxonomy_term_load($eid);
    }
  }
  else {
    return $related_links;
  }
  $related_links = os2web_related_links_get_links($entity, $entity_type);

  if ($entity_type == 'node' && $entity->type == 'borger_dk_article' && module_exists('bellcom_borgerdk_migrate')) {
    $links_from_article = bellcom_borgerdk_migrate_get_related_links($entity);
    if (is_array($related_links)) {
      $related_links = array_merge($related_links, $links_from_article);
    }
    else $related_links = $links_from_article;
  }

  if (!empty($related_links)) {
    $output = os2web_related_links_make_markup($related_links);
  }
  return $output;
}

function _os2web_related_links_block_content_selfservice() {
  $entity = FALSE;
  $eid = arg(1);
  $output = '';
  if (is_numeric($eid)) {
    $entity = node_load($eid);
  }
  $links = os2web_related_links_get_selfservice_links($entity);

  if ($entity->type == 'borger_dk_article' && module_exists('bellcom_borgerdk_migrate')) {
    $links_from_article = bellcom_borgerdk_migrate_get_selfservice_links($entity);
    if (is_array($links)) {
      $links = array_merge($links, $links_from_article);
    }
    else $links = $links_from_article;
  }

  if (!empty($links)) {
    $output = os2web_related_links_make_markup($links);
  }
  return $output;
}

/**
 * OS2WEB os2web_related_links_get_links().
 */
function os2web_related_links_get_links($entity, $entity_type) {
  $related_links = array();

  switch ($entity_type) {

    case 'node':
      // 1. Get all unique related links from the node.
      $base_field_links = field_get_items(
        'node',
        $entity,
        'field_os2web_base_field_related'
      );

      // 2. Get borger.dk recommended links.
      if ($entity->type == 'os2web_borger_dk_article' && $item = field_get_items(
          'node',
          $entity,
          'field_os2web_borger_dk_recommend'
        )
      ) {
        $borger_dk_related_links = os2web_related_links_get_borger_dk_links(
          $item
        );
      }

      // 3. Get all related links related to the KLE number on the node.
      if ((!isset($entity->field_os2web_base_field_hidlinks['und'][0]['value']) ||
        $entity->field_os2web_base_field_hidlinks['und'][0]['value'] == '0')
      ) {
        $kle_items = field_get_items(
          'node',
          $entity,
          'field_os2web_base_field_kle_ref'
        );
      }

      // 4. External related links.
      $ext_links = field_get_items(
        'node',
        $entity,
        'field_os2web_base_field_ext_link'
      );

      break;

    case 'taxonomy_term':
      // 1. Get all unique related links from the node.
      $base_field_links = field_get_items(
        'taxonomy_term',
        $entity,
        'field_os2web_base_field_related'
      );

      // 3. Get all related links related to the KLE number on the node.
      if ((!isset($entity->field_os2web_base_field_hidlinks['und'][0]['value']) ||
        $entity->field_os2web_base_field_hidlinks['und'][0]['value'] == '0')
      ) {
        $kle_items = field_get_items(
          'taxonomy_term',
          $entity,
          'field_os2web_base_field_kle_ref'
        );
      }
      // 4. External related links.
      $ext_links = field_get_items(
        'taxonomy_term',
        $entity,
        'field_os2web_base_field_ext_link'
      );
      break;
  }

  // 1. Get all unique related links from the node.
  if ($base_field_links) {
    foreach ($base_field_links as $link) {
      $link_node = node_load($link['nid']);
      if ($link_node) {
        $related_links[$link['nid']] = array(
          'nid' => $link['nid'],
          'title' => $link_node->title,
          'class' => 'int-link',
        );
      }
    }
  }

  // 2. Get borger.dk recommended links.
  if (isset($borger_dk_related_links) && $borger_dk_related_links) {
    foreach ($borger_dk_related_links as $key => $link) {
      $related_links[$entity->nid . '_' . $key] = array(
        'url' => $link['url'],
        'title' => $link['title'],
        'class' => 'ext-link',
      );
    }
  }
  // 3. Get all related links related to the KLE number on the node. Only get
  // these if the checkbox "Skjul relaterede links" isn't checked.
  // Check also links nodes are not siblings with the reviewed node.
  if (isset($kle_items) && $kle_items) {

    foreach ($kle_items as $kle) {
      // Get all nodes which have the same KLE number as this node.
      $query = new EntityFieldQuery();

      // Only show 10 items. TODO: admin setting form for content type and max iterms.
      $result = $query->entityCondition('entity_type', 'node')
        ->propertyCondition('status', 1)
        ->fieldCondition('field_os2web_base_field_kle_ref', 'tid', $kle['tid'])
        ->range(0, 10)
        ->execute();

      if (isset($result['node'])) {
        foreach ($result['node'] as $link) {
          // Be sure to skip links which already is in list, or links to current
          // node.
          if (isset($related_links[$link->nid]) || ($entity_type == 'node' && $entity->nid == $link->nid)) {
            continue;
          }
          // Check the link node is not siblings in menu,
          // does not have the same parent menu link.
          if (os2web_related_links_check_parent_menu_link(
            $entity,
            $link,
            $entity_type
          )) {
            continue;
          }

          $link_node = node_load($link->nid);
          if ($link_node) {
            $related_links[$link->nid] = array(
              'nid' => $link->nid,
              'title' => $link_node->title,
              'class' => 'kle-link',
            );
          }

        }
      }
    }
  }

  // 4. External related links.
  if ($ext_links) {
    foreach ($ext_links as $link) {
      $related_links[] = array(
        'url' => $link['url'],
        'title' => $link['title'],
        'class' => 'ext-link',
      );
    }
  }
  return $related_links;
}

function _os2web_term_block_content_selfservice_links() {
  $entity = FALSE;
  $tid = arg(2);
  $output = '';
  if (is_numeric($tid)) {
    $entity = taxonomy_term_load($tid);
  }
  $links = os2web_related_links_get_selfservice_links(NULL, $entity);

  if (!empty($links)) {
    $output = '<ul class="selvbetjenings-links">';
    $output .= '<li class="underterm-links level-0"><a>Mest anvendte</a>';
    $output .= '<ul class="underterm-links level-0">';
    $output .= os2web_related_links_make_markup($links, 'underterm-links');
    $output .= '</ul>';
    $output .= '</li>';

    $output .= _os2web_term_block_get_children($tid, 0);
    $output .= '</ul>';
  }
  return $output;
}

function _os2web_term_block_get_children($tid, $level) {
  if ($children = taxonomy_get_children($tid)) {
    foreach ($children as $child) {

      $links = os2web_related_links_get_selfservice_links(NULL, $child);
      if ($links) {

        $output .= '<li class="underterm-links level-' . $level . '">' . '<a>' . $child->name . '</a>';

        $output .= '<ul class="underterm-links level-' . $level . '">';
        $output .= os2web_related_links_make_markup($links, 'underterm-links');

        if ($children2 = taxonomy_get_children($child->tid)) {
          $level++;
          $output .= _os2web_term_block_get_children($child->tid, $level);
        }

        $output .= '</ul></li>';
      }
    }
  }
  return $output;
}

function os2web_related_links_get_selfservice_links($node = NULL, $term = NULL) {
  $selfservicelinks = array();
  // Borger.dk artiles selfservice links.
  if (isset($node) && $node->type == 'os2web_borger_dk_article') {
    if ($borger_dk_links = field_get_items(
      'node',
      $node,
      'field_os2web_borger_dk_selfservi'
    )
    ) {
      $selfservicelinks = os2web_related_links_get_borger_dk_links(
        $borger_dk_links
      );
    }
  }

  if (($node && $links = field_get_items('node', $node, 'field_os2web_base_field_selfserv')) || ($term && $links = field_get_items('taxonomy_term', $term, 'field_os2web_base_field_selfserv'))) {
    foreach ($links as $link) {
      $selfservicelink = node_load($link['nid']);

      if ($selfservicelink) {
        $link_fields = field_get_items('node', $selfservicelink, 'field_spot_link');
        $link_title = field_get_items('node', $selfservicelink, 'field_vist_navn');

        if ($link_document = field_get_items('node', $selfservicelink, 'field_os2web_base_doc_ref_single')) {
          $document = node_load($link_document[0]['target_id']);

          // File ID
          if ($field_file_id = field_get_items('node', $document, 'field_os2web_cp_service_file_id')) {

            // Get a web accessible URL for the document
            $document_link = '/os2web/service/gf/v1/' . $field_file_id[0]['value'];
          }
        }

        if (!empty($link_fields)) {

          $link_field = array_shift($link_fields);
          $selfservicelinks[$link['nid']] = array(
            'url' => !empty($document_link) ? $document_link : $link_field['url'],
            'title' => $link_title ? $link_title[0]['value'] : $link_field['title'],
          );
        }
        elseif ($document_link) {
          $selfservicelinks[$link['nid']] = array(
            'url' => $document_link,
            'title' => $link_title[0]['value'],
          );
        }
      }
    }
  }

  return $selfservicelinks;
}

/**
 * Make block links markup.
 */
function os2web_related_links_make_markup($related_links, $class = NULL) {
  if (!isset($class)) {
    $output = '<ul class="related-links">';
  }
  else {
    $output = '';
  }

  foreach ($related_links as $key => $link) {
    $output .= '<li>';

    if (isset($link['url'])) {
      $output .= l(
        $link['title'],
        $link['url'],
        array(
          'attributes' => array(
            'class' => !empty($link['class']) ? $link['class'] : array(),
            'title' => $link['title'],
          ),
        )
      );
    }
    else {
      $output .= l(
        $link['title'],
        drupal_get_path_alias('node/' . $link['nid']),
        array(
          'attributes' => array(
            'class' => !empty($link['class']) ? $link['class'] : array(),
            'title' => $link['title'],
          ),
        )
      );
    }

    $output .= '</li>';
  }

  if (!isset($class)) {
    $output .= '</ul>';
  }

  return $output;
}

/**
 * Helper. Returns true or false.
 *
 * @param object $node
 *   reviewed node object.
 *   object $link.
 *   related link object.
 *   string $type
 *   node or term.
 */
function os2web_related_links_check_parent_menu_link($node, $link, $type) {
  switch ($type) {
    case 'node':
      $path = 'node/' . $node->nid;
      break;

    case 'taxonomy_term':
      $path = 'taxonomy/term/' . $node->tid;
  }
  $node_plid = os2web_related_links_get_parent_menu_link($path);
  $link_plid = os2web_related_links_get_parent_menu_link('node/' . $link->nid);

  if ($node_plid == $link_plid && $node_plid != 0) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Helper. Get menu links parent plid.
 */
function os2web_related_links_get_parent_menu_link($path) {

  $plid = db_query(
    "SELECT plid FROM {menu_links} WHERE link_path = :link_path",
    array(':link_path' => $path)
  )->fetchField();
  return $plid;
}

