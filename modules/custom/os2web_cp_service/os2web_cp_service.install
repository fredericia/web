<?php
/**
 * @file
 * Implements install hooks
 */

/**
 * Imlpements hook_install().
 */
function os2web_cp_service_install() {
  // Quick way to have default approved rules.
  // $approved_rules = array('Byggesager', 'Emnesager', 'Postliste');

  // $rules_vocabulary = taxonomy_vocabulary_machine_name_load('os2web_cp_service_tax_approved_rules');
  // foreach ($approved_rules as $name) {
  //  $term = new stdClass();
  //  $term->vid = $rules_vocabulary->vid;
  //  $term->name = $name;
  //  taxonomy_term_save($term);
  // }
}

/**
 * Implements hook_update_N().
 *
 * Cleanup resets counter field for succesfuly transfered documents.
 */
function os2web_cp_service_update_7001() {
  $nodeQuery = new EntityFieldQuery();
  $nodes = $nodeQuery->entityCondition('entity_type', 'node')
    ->fieldCondition('field_os2web_cp_service_deliver', 'value', 1)
    ->fieldCondition('field_os2web_cp_service_res_c', 'value', 0, '>')
    ->execute();
  if (!empty($nodes['node'])) {
    $nids = [];
    foreach ($nodes['node'] as $row) {
      $nids[] = $row->nid;
    }
    db_update('field_data_field_os2web_cp_service_res_c')
      ->fields(array('field_os2web_cp_service_res_c_value' => 0))
      ->condition('entity_id', $nids, 'IN')
      ->execute();
    entity_get_controller('node')->resetCache($nids);
  }
}
/**
 * Implements hook_update_N().
 *
 * Add to tranfsfer queue documents with updated metadata.
 */
function os2web_cp_service_update_7002() {
  $nodeQuery = new EntityFieldQuery();
  $nodes = $nodeQuery->entityCondition('entity_type', 'node')
    ->fieldCondition('field_os2web_cp_service_deliver', 'value', 1)
    ->fieldCondition('field_os2web_cp_service_tr_stat', 'value','Metadata update', 'STARTS_WITH')
    ->execute();
  if (!empty($nodes['node'])) {
    $nids = [];
    foreach ($nodes['node'] as $row) {
      $nids[] = $row->nid;
    }
    db_update('field_data_field_os2web_cp_service_deliver')
      ->fields(array('field_os2web_cp_service_deliver_value' => 0))
      ->condition('entity_id', $nids, 'IN')
      ->execute();
    entity_get_controller('node')->resetCache($nids);
  }
}
